seed_offset: 0  # Added for reproducibility

out_dir: out-cube_structure
eval_interval: 250
eval_iters: 200
log_interval: 10

eval_only: False  # If true, the script will only evaluate once and exit  (do we need this?)

# we expect to overfit on this small dataset, so only save when val improves
always_save_checkpoint: True

dataset: cube_structure
gradient_accumulation_steps: 5  # Used to simulate larger batch sizes
batch_size: 64  # if config['gradient_accumulation_steps'] > 1, this is the micro-batch size
block_size: 256  # context of up to 256 previous characters

# baby GPT model :)
n_layer: 6
n_head: 6
n_embd: 384
dropout: 0.2  # for pretraining 0 is good, for finetuning try 0.1+
bias: False  # do we use bias inside LayerNorm and Linear layers?

# adamw optimizer
learning_rate: 1e-3  # max learning rate, with baby networks can afford to go a bit higher
max_iters: 5000  # total number of training iterations
weight_decay: 1e-1
beta1: 0.9
beta2: 0.99  # make a bit bigger because number of tokens per iter is small

grad_clip: 1.0  # clip gradients at this value, or disable if == 0.0
decay_lr: True  # whether to decay the learning rate
lr_decay_iters: 5000  # make equal to max_iters usually
min_lr: 1e-4  # learning_rate / 10 usually

warmup_iters: 100  # how many steps to warm up for, not super necessary potentially

# examples: 'cpu', 'cuda', 'cuda:0', 'cuda:1' etc., or try 'mps' on macbooks
device: cuda

# 'float32', 'bfloat16', or 'float16', the latter will auto implement a GradScaler
dtype: float16

# use PyTorch 2.0 to compile the model to be faster
compile: True





# Configurations for hydra itself
hydra:
  run:
    dir: ${oc.env:OUTPUT_DIR,./outputs}/${hydra.job.config_name}/${now:%Y-%m-%d}/${now:%H-%M-%S}
  job:
    chdir: True